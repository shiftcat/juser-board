<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>

	<!--  
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName">
			<value>${home_ds}</value>
		</property>
	</bean>
	-->
	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName">
			<value>oracle.jdbc.driver.OracleDriver</value>
		</property>
		<property name="url">
			<value>jdbc:oracle:thin:@192.168.100.36:1521:orcl</value>
		</property>
		<property name="username">
			<value>juser</value>
		</property>
		<property name="password">
			<value>jusertest</value>
		</property>
        <property name="defaultAutoCommit">
        	<value>true</value>
		</property>
		<property name="maxWait">
			<value>100</value>
		</property>
        <property name="maxActive">
        	<value>100</value>
		</property>
        <property name="maxIdle">
        	<value>20</value>
		</property>
	</bean>
	
	<bean id="nativeJdbcExtractor" class="org.springframework.jdbc.support.nativejdbc.SimpleNativeJdbcExtractor" />
	<bean id="lobHandler" class="org.springframework.jdbc.support.lob.OracleLobHandler">
		<property name="nativeJdbcExtractor" ref="nativeJdbcExtractor" />
	</bean>
	
	<bean id="juserSqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="configLocation">
			<value>classpath:/han/juser/dao/ibatis/sqlmaps/SqlMapConfig.xml</value>
		</property>
		<property name="dataSource">
			<ref local="dataSource"/>
		</property>
		<property name="lobHandler">
			<ref bean="lobHandler" />
		</property>
	</bean>
	
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	
	<!--  
	
	tomcat에서 JTA를 사용
	JTA interface에 대한 구현은 컨테이너에서 제공하는 구현체를 사용하던가
	아니면 따로 구현해서 jndi로 명명해서 사용해야 하는 방법이 있구요...
	그래서 찾아봤더니 JOTM을 사용하는 방법이 있었습니다.

	Spring에서는 친절하게도 JotmFactoryBean을 지원해 주고 있구요...
	Spring doc에서 JotmFactoryBean을 찾아보시면 아래와 같이 친절히 설명해주고 있습니다.

	FactoryBean that retrieves the JTA UserTransaction/TransactionManager for ObjectWeb's JOTM. 
	Will retrieve an already active JOTM instance if found (e.g. if running in JOnAS), else create a new local JOTM instance. 
	The same object implements both the UserTransaction and the TransactionManager interface, as returned by this FactoryBean. 

	A local JOTM instance is well-suited for working in conjunction with ObjectWeb's XAPool, e.g. with bean definitions like the following: 
	
	
	
	<bean id="jotm" class="org.springframework.transaction.jta.JotmFactoryBean"/>
	
	<bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">  
		<property name="userTransaction" ref="jotm"/>
	</bean>
	
	<bean id="innerDataSource" class="org.enhydra.jdbc.standard.StandardXADataSource" destroy-method="shutdown">  
		<property name="transactionManager" ref="jotm"/>  
		<property name="driverName" value="..."/>  
		<property name="url" value="..."/>
	</bean>
	
	<bean id="dataSource" class="org.enhydra.jdbc.pool.StandardXAPoolDataSource" destroy-method="shutdown">  
		<property name="dataSource" ref="innerDataSource"/>  
		<property name="user" value="..."/>  
		<property name="password" value="..."/>  
		<property name="maxSize" value="..."/>
	</bean>
	
	-->
	
	
	<bean id="loginHandler" class="han.juser.controller.session.LoginHandler" />
	
	<bean id="roleContext" class="han.role.RoleContext" destroy-method="release">
		<property name="source">
			<value>/WEB-INF/roles/role.xml</value>
		</property>
	</bean>
	
	<bean id="role" class="han.role.RoleManagerImpl">
		<property name="roleContext" ref="roleContext" />
	</bean>
	
	
	
	<bean id="blogItem" class="han.juser.controller.manager.MainItem">
		<property name="service" ref="blogService" />
		<property name="key"><value>blogMainItem</value></property>
		<property name="limit"><value>5</value></property>
	</bean>
	
	<bean id="boardItem" class="han.juser.controller.manager.MainItem">
		<property name="service" ref="boardService" />
		<property name="key"><value>boardMainItem</value></property>
		<property name="limit"><value>6</value></property>
	</bean>
	
	<bean id="jboardItem" class="han.juser.controller.manager.MainItem">
		<property name="service" ref="jboardService" />
		<property name="key"><value>jboardMainItem</value></property>
		<property name="limit"><value>6</value></property>
	</bean>
	
	<bean id="guestItem" class="han.juser.controller.manager.MainItem">
		<property name="service" ref="guestService" />
		<property name="key"><value>guestMainItem</value></property>
		<property name="limit"><value>4</value></property>
	</bean>
	

	
	<bean id="mainManager" class="han.juser.controller.manager.MainManager">
		<property name="items">
			<list>
				<ref bean="blogItem" /> 
				<ref bean="boardItem" />
				<ref bean="jboardItem" />
				<ref bean="guestItem" /> 
			</list>
		</property>
	</bean>
	
	<!-- Service Advice -->
	<bean id="serviceLoggerAdvice" 
				class="han.juser.service.ServiceLoggerAdvice" />
				
	<bean id="serviceExceptionLoggerAdvice" 
	            class="han.juser.service.ServiceExceptionLoggerAdvice"/>
	 
</beans>